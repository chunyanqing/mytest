Servlet
	sun公司在jdk1.2的时候开发的一种用于扩展web服务的一组组件技术
	该组件要求实现servlet接口，并且符合servlet规范,
	而且要放在符合servlet规范的web服务器中运行
	以后的访问必须要有web服务器(容器)
	
	组件(由程序员自己开发的)
		按照特定的规范开发的程序
		该程序不需要考虑一些基础服务(网络通信、多线程、xml解析)
		程序员只关心业务逻辑
		基础服务由容器去实现
	
	容器(程序员使用的一款软件)
		按照特定的规范开发的程序
		实现了基础服务,并且提供了组件的运行环境
		
	组件+容器
		1.简化开发,不需要程序员自己再去开发基础服务,容器已经帮我们实现
		2.组件不需要依赖于特定的容器,容器可以换,要求该容器必须实现了servlet规范
		3.客户端是由浏览器去运行的,但是后台代码是java代码,而可以不安装jdk就能访问你的程序
		
	
	tomcat
		开源(开放源码)的免费的servlet容器,实现了web服务器的大部分
		
		安装
			1.解压缩
			2.配置环境变量
				tomcat依赖
					JAVA_HOME:jdk安装目录
					CLASSPATH:jdk搜索字节码文件所找的目录或者jar包
				
				自己的
					CATALINA_HOME:tomcat安装目录(比如    E:\tools\apache-tomcat-7.0.20)
						
				系统
					path:原来的path加上tomcat安装目录的bin目录(比如    E:\tools\apache-tomcat-7.0.20\bin)
		
			
			
		启动服务器
			1.catalina.bat run 		windows
			  catalina.sh run		linux
			  
			2.startup.bat			windows
			  startup.sh			linux
			
		关闭服务器
			1.ctrl+c快捷键
			
			2.重新打开一个窗口输入
				shutdown.bat
				shutdown.sh
		
		访问:
			http://ip地址:端口号
			http://127.0.0.1:8080
				
		tomcat默认端口号是8080	
			如何改变端口号
			
		
		遇到端口号已经被使用	
			找到进程中的服务器使用的部分,将其结束
			
	开发servlet
		1.写一个java类
			必须实现servlet接口或者继承HttpServlet
			重写service方法
			
			HttpServletRequest:请求
			
			HttpServletResponse:响应
		
			代码示例:
			package day01;
			import java.io.*;
			import javax.servlet.*;
			import javax.servlet.http.*;
			public class HelloServlet extends HttpServlet{
				public void service(HttpServletRequest request,HttpServletResponse response)
							throws ServletException,IOException{
					PrintWriter out = response.getWriter();
					out.println("<h1>Hello Servlet</h1>");
				}
			}
		
		
		2.编译
			需要依赖servlet-api.jar
			将编译后的字节码文件放入到其他目录中
			
			javac -d ../bin -cp ../lib/servlet-api.jar HelloServlet.java
			
		
		3.定义一个目录结构
			appname(自定义应用名)
			WEB-INF(目录)
				classes(目录,存放字节码文件,包含包)
				lib(目录,存放第三方jar包)
				web.xml(配置文件)
				
			  <servlet>
				<servlet-name>HelloServlet</servlet-name>
				<servlet-class>day01.HelloServlet</servlet-class>
			  </servlet>
			  <servlet-mapping>
				<servlet-name>HelloServlet</servlet-name>
				<url-pattern>/sayHello</url-pattern>
			  </servlet-mapping>
							
				
			公共资源(js、css、html、images...)
		
		4.部署
			将appname这个目录拷贝到tomcat安装目录下的webapps目录下
		
		5.访问
			启动服务访问
			浏览器输入访问地址:http://ip地址:端口号/自定义应用名/url-pattern
			http://127.0.0.1:8080/test/sayHello	
		
		
	myeclipse开发servlet
		配置tomcat
		
	
	servlet运行过程
	浏览器发送请求到达服务器
	到达服务器之后服务器会将请求中的数据打成一个包,
	将它封装成一个对象(HttpServletRequest接口的实现类的对象)
	同时还会创建一个响应对象(HttpServletResponse接口的实现类的对象)
	服务会根据请求(http://127.0.0.1:8080/web/test?name=admin)
	查看web.xml,找到对应的servlet
	调用该servlet的service方法(doGet/doPost)
	并将服务器创建的request以及response对象传给service方法
	service方法可以获取请求中的数据,做业务处理
	并且提供响应的视图
	服务器会根据response对象生成对应的响应结果发送给客户端
	
	
	http协议
		超文本传输协议
		
	传输过程
		无状态协议
			每次访问都是一次请求一次响应,用完就结束
			下次再次访问,就是新的请求与新的响应,与上一次无关
		
		
		浏览器向服务器发送连接请求
		浏览器与服务器建立连接
		浏览器向服务器发送请求数据
		服务器处理请求、处理业务、生成响应
		服务器将响应数据发送给浏览器
		服务器关闭连接
		
		
		如果再次发送请求
		需要重新建立连接
		

create table t_emp(
	id int primary key auto_increment,
	name varchar(10),
	salary double,
	gender varchar(5),
	edu varchar(10),
	hobbies varchar(20)
)engine=Innodb default charset=utf8;

乱码
	get请求
	修改tomcat配置文件server.xml
	URIEncoding="UTF-8"


	jdbc访问数据库步骤(6步)
		1.注册驱动(告诉java代码,我用的是什么数据库)
		Class.forName(driver)
		2.获取连接
			DriverManager.getConnection(url,username,password)
		3.获取状态集
			conn.createStatement
		4.获取结果集
		
		5.行映射(处理结果集)
		
		6.释放资源
	
	
	
	
		
			
	